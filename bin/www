#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('whenwemeet:server');
var https = require('https');
var http = require('http');
var fs = require('fs');
var options = {
	key: fs.readFileSync('conf/key.pem'),
	cert: fs.readFileSync('conf/cert.pem')
};
/**
 * Get port from environment and store in Express.
 */

var port1 = normalizePort(process.env.PORT || '1045');
var port2 = normalizePort(process.env.PORT || '1046');
/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var httpsServer = https.createServer(options, app);
var io = require('socket.io').listen(httpsServer);
io.on('connection', function (socket) {
	console.log('a user connected');
});
/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(port1);
httpsServer.listen(port2, function () {
	console.log('listening on *:' + port2);
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port2 === 'string'
		? 'Pipe ' + port2
		: 'Port ' + port2;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = httpsServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
