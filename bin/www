#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('whenwemeet:server');
var http = require('http');
var mongoClient = require('../mongodb');
var roomCollection;
var rooms = {};
var httpServer = http.createServer(app);
var io = require('socket.io')(httpServer);
mongoClient.then(function (db) {
	roomCollection = db.collection('rooms');
	io.on('connection', function (socket) {
		console.log(socket.id + ' user connected');
		socket.on('disconnect', function () {
			console.log('user disconnected');
		});
		socket.on('changeColor', function (data) {
			console.log('socket change color');
			roomCollection.updateOne({
				'rid': data.rid, 'members.id': data.id
			}, {
				$set: {'color': data.color}
			}).then(function () {
				io.in(data.rid).emit('changeColor', data);
			});
		});
		socket.on('busy', function (data) {
			console.log('socket busy');
			console.log(data);
			io.in(data.rid).emit('busy', data);
		});
		socket.on('not-busy', function (data) {
			console.log('socket not-busy');
			console.log(data);
			io.in(data.rid).emit('not-busy', data);
		});
		socket.on('chat', function (data) {
			console.log('socket chat');
			io.in(data.rid).emit('chat', data);
		});
		socket.on('confirmed', function (data) {
			console.log(data.id + ' socket confirmed');
			io.in(data.rid).emit('confirmed', data);
		});
		socket.on('requestArr', function (data) {
			console.log('socket request Arr ' + data.rid + ' ' + data.id);
			data.sid = socket.id;
			socket.join(data.rid);
			io.in(data.rid).emit('requestArr', data);
		});
		socket.on('responseArr', function (data) {
			console.log('socket responseArr ' + data.sid);
			io.sockets.connected[data.sid].emit('responseArr', data);
		});
		socket.on('ban', function (data) {
			console.log('socket ban');
			roomCollection.updateOne({'rid': data.rid.toString(), color: data.id}, {
				$pull: {'members': {'id': data.id}},
				$set: {'color.$': null, day: data.day, night: data.night}
			}).then(function (result) {
				console.log('member deleted');
				console.log(result);
				io.in(data.rid).emit('ban', data);
				socket.leave(data.rid);
				delete rooms[data.rid].socket_ids[data.id];
			}).catch(function (err) {
				console.error('quiterror:' + err);
			});
		});
		socket.on('enter', function (data) {
			console.log('socket enter');
			console.log(rooms[data.rid] === undefined);
			socket.join(data.rid);
			if (rooms[data.rid] === undefined) {
				console.log('create room#' + data.rid);
				rooms[data.rid] = {};
				rooms[data.rid].socket_ids = {};
			}
			data.socket = socket.id;
			rooms[data.rid].socket_ids[data.id] = data.name;
			socket.broadcast.to(data.rid).emit('newMember', data);
		});
		socket.on('uptodateArr', function (data) {
			console.log('socket uptodate Arr ' + data.sid);
			io.sockets.connected[data.sid].emit('uptodateArr', data);
		});
		socket.on('out', function (data) {
			console.log('socket out');
			io.in(data.rid).emit('out', data);
			socket.leave(data.rid);
			delete rooms[data.rid].socket_ids[data.id];
		});
		socket.on('quit', function (data) {
			console.log('socket quit ' + data.rid + ' ' + data.id);
			roomCollection.updateOne({'rid': data.rid.toString(), color: data.id}, {
				$pull: {'members': {'id': data.id}},
				$set: {'color.$': null, day: data.day, night: data.night}
			}).then(function () {
				console.log('member deleted');
				io.in(data.rid).emit('quit', data);
				socket.leave(data.rid);
				delete rooms[data.rid].socket_ids[data.id];
			}).catch(function (err) {
				console.error('quit error:' + err);
			});
		});
		socket.on('delegate', function (data) {
			console.log('socket delegate ' + data.rid + ' ' + data.id + ' next admin' + data.admin);
			roomCollection.updateOne({'rid': data.rid.toString(), color: data.id}, {
				$pull: {'members': {'id': data.id}},
				$set: {'maker': data.admin, 'picture': data.picture, 'color.$': null, day: data.day, night: data.night}
			}).then(function () {
				return memberCollection.updateOne({pid: data.id}, {$inc: {roomcount: -1}});
			}).then(function () {
				return memberCollection.updateOne({pid: data.admin}, {$inc: {roomcount: 1}});
			}).then(function () {
				console.log('delegated');
				io.in(data.rid).emit('delegate', data);
				socket.leave(data.rid);
				delete rooms[data.rid].socket_ids[data.id];
			}).catch(function (err) {
				console.error('delegate error:' + err);
			});
		});
		socket.on('explode', function (data) {
			console.log('socket explode');
			roomCollection.deleteOne({rid: data.rid, maker: data.id}).then(function () {
				return memberCollection.updateOne({pid: data.id}, {$inc: {roomcount: -1}});
			}).then(function () {
				socket.leave(data.rid);
				socket.broadcast.to(data.rid).emit('explode', data.rid);
			});
		});
		socket.on('titleChanged', function (data) {
			console.log('socket titleChanged');
			socket.emit('titleChanged', data);
		});
		socket.on('currentChanged', function (data) {
			console.log('current titleChanged');
			socket.emit('currentChanged', data);
		});
		socket.on('totalChanged', function (data) {
			console.log('total titleChanged');
			socket.emit('totalChanged', data);
		});
	});
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
/**
 * Create HTTP server.
 */


httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}
function onError(error) {
	var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;
	if (error.syscall !== 'listen') {
		throw error;
	}
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
function onListening() {
	var addr = httpServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}