#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('whenwemeet:server');
var http = require('http');
var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://zero:Wpfhsms0!@ds031873.mongolab.com:31873/heroku_lhdjlrwx';
var db, memberCollection, roomCollection;
var rooms = {};
MongoClient.connect(url, function (err, database) {
	if (err) {
		console.error(err);
	} else {
		console.log("www:Connected correctly to server");
		db = database;
		memberCollection = db.collection('members');
		roomCollection = db.collection('rooms');
	}
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var io = require('socket.io')(httpServer);
io.on('connection', function (socket) {
	console.log(socket.id + ' user connected');
	socket.on('disconnect', function () {
		console.log('user disconnected');
	});
	socket.on('busy', function (data) {
		console.log('socket busy');
		console.log(data);
		io.in(data.rid).emit('busy', data);
	});
	socket.on('not-busy', function (data) {
		console.log('socket not-busy');
		console.log(data);
		io.in(data.rid).emit('not-busy', data);
	});
	socket.on('chat', function (data) {
		console.log('socket chat');
		io.in(data.rid).emit('chat', data);
	});
	socket.on('confirmed', function (data) {
		console.log(data.id + ' socket confirmed');
		io.in(data.rid).emit('confirmed', data);
	});
	socket.on('requestArr', function (data) {
		console.log('socket request Arr ' + data.rid + ' ' + data.id);
		data.sid = socket.id;
		socket.broadcast.to(data.rid).emit('requestArr', data);
	});
	socket.on('responseArr', function (data) {
		console.log('socket responseArr ' + data.sid);
		io.sockets.connected[data.sid].emit('responseArr', data);
	});
	socket.on('ban', function (data) {
		console.log('socket ban');
		io.in(data.rid).emit('ban', data);
	});
	socket.on('enter', function (data) {
		console.log('socket enter');
		console.log(rooms[data.rid] === undefined);
		socket.join(data.rid);
		if (rooms[data.rid] === undefined) {
			console.log('create room#' + data.rid);
			rooms[data.rid] = {};
			rooms[data.rid].socket_ids = {};
		}
		rooms[data.rid].socket_ids[data.id] = data.name;
		roomCollection.findOne({rid: data.rid.toString()}, function (err, doc) {
			if (err) {
				console.log('entererror:' + err);
			} else {
				doc.id = data.id;
				doc.name = data.name;
				doc.order = data.order;
				doc.socket = socket.id;
				socket.on('uptodateArr', function (data) {
					console.log('socket uptodate Arr ' + data.sid);
					io.sockets.connected[data.sid].emit('uptodateArr', data);
				});
				socket.broadcast.to(data.rid).emit('newMember', doc);
			}
		});
	});
	socket.on('quit', function (data) {
		console.log('socket quit ' + data.rid + ' ' + data.id);
		roomCollection.updateOne({'rid': data.rid.toString()}, {$pull: {'members': {'id': data.id}}}).then(function (result) {
			console.log('member deleted');
			console.log(result);
			io.in(data.rid).emit('quit', data);
			socket.leave(data.rid);
			delete rooms[data.rid].socket_ids[data.id];
		}).catch(function (err) {
			console.error('quiterror:' + err);
		});
	});
	socket.on('out', function (data) {
		console.log('socket out');
		io.in(data.rid).emit('out', data);
		socket.leave(data.rid);
		delete rooms[data.rid].socket_ids[data.id];
	});
	socket.on('delegate', function (data) {
		console.log('socket delegate ' + data.rid + ' ' + data.id + 'next admin' + data.admin);
		roomCollection.updateOne({'rid': data.rid.toString()}, {
			$pull: {'members': {'id': data.id}},
			$set: {'maker': data.admin, 'picture': data.picture}
		}, function (err, result) {
			if (err) {
				console.log('quiterror:' + err);
			} else {
				console.log('member deleted');
				console.log(result);
				io.in(data.rid).emit('quit', data);
				socket.leave(data.rid);
				delete rooms[data.rid].socket_ids[data.id];
			}
		});
	});
	socket.on('explode', function (rid) {
		console.log('socket explode');
		socket.broadcast.to(rid).emit('explode', rid);
		socket.leave(data.rid);
	});
	socket.on('titleChanged', function (data) {
		console.log('socket titleChanged');
		socket.emit('titleChanged', data);
	});
	socket.on('currentChanged', function (data) {
		console.log('current titleChanged');
		socket.emit('currentChanged', data);
	});
	socket.on('totalChanged', function (data) {
		console.log('total titleChanged');
		socket.emit('totalChanged', data);
	});
});
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}
function onError(error) {
	var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;
	if (error.syscall !== 'listen') {
		throw error;
	}
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
function onListening() {
	var addr = httpServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}