#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('whenwemeet:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var io = require('socket.io')(httpServer);
var Pgb = require('pg-bluebird');
var pgb = new Pgb();
var cnn;
var room = [];
io.on('connection', function (socket) {
	console.log('a user connected');
	socket.on('disconnect', function(){
		console.log('user disconnected');
	});
	socket.on('busy', function(data) {
		io.emit('busy', data);
	});
	socket.on('not-busy', function(data) {
		io.emit('not-busy', data);
	});
	socket.on('chat', function(data) {
		io.emit('chat', data);
	});
	socket.on('enter', function(data) {
		pgb.connect(process.env.DATABASE_URL)
			.then(function(connection) {
				cnn = connection;
				return cnn.client.query('SELECT dormant FROM rooms WHERE id = $(id)', [data.rid]);
			})
			.then(function(result) {
				io.emit('enter', result);	
			})
			.catch(function(err) {
				console.log('onlineList connection error ' + err);
			});
	});
	socket.on('quit', function(data) {
		io.emit('quit', data.id);
	});
	socket.on('out', function(data) {
		io.emit('out', data.id);
	});
});

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = httpServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
