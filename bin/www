#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('whenwemeet:server');
var http = require('http');
var fs = require('fs');
var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://zero:Wpfhsms0!@ds031873.mongolab.com:31873/heroku_lhdjlrwx';
var db, memberCollection, roomCollection;
MongoClient.connect(url, function(err, database) {
	if (err) {
		console.error(err);
	} else {
		console.log("www:Connected correctly to server");
		db = database;
		memberCollection = db.collection('members');
		roomCollection = db.collection('rooms');
	}
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var io = require('socket.io')(httpServer);
io.on('connection', function (socket) {
	console.log('a user connected');
	socket.on('disconnect', function(){
		console.log('user disconnected');
		io.in(process.env.CURRENT_ROOM).emit('out', process.env.MY_ID);
		socket.leave(process.env.CURRENT_ROOM);
	});
	socket.on('busy', function(data) {
		console.log('socket busy');
		console.log(data);
		io.in(process.env.CURRENT_ROOM).emit('busy', data);
	});
	socket.on('not-busy', function(data) {
		console.log('socket not-busy');
		console.log(data);
		io.in(process.env.CURRENT_ROOM).emit('not-busy', data);
	});
	socket.on('chat', function(data) {
		console.log('socket chat');
		io.in(process.env.CURRENT_ROOM).emit('chat', data);
	});
	socket.on('confirmed', function(data) {
		console.log(data.id + ' socket confirmed');
		io.in(process.env.CURRENT_ROOM).emit('confirmed', data);
	});
	socket.on('ban', function(data) {
		console.log('socket ban');
		io.in(process.env.CURRENT_ROOM).emit('ban', data);
	});
	socket.on('enter', function(data) {
		console.log('socket enter');
		console.log(data);
		console.log(process.env.MY_ID);
		process.env.CURRENT_ROOM = data.rid;
		socket.join(process.env.CURRENT_ROOM);
		roomCollection.find({rid: data.rid.toString()}).toArray(function(err, docs) {
			if (err) {
				console.log('entererror:' + err);
			} else {
				console.log('enter result:');
				docs[0].id = data.id;
				docs[0].name = data.name;
				docs[0].socket = socket.id;
				console.log(docs);
				socket.broadcast.to(process.env.CURRENT_ROOM).emit('newMember', docs[0]);
				socket.on('uptodateArr', function(data) {
					io.sockets.connected[data.sid].emit('uptodateArr', data);
				});
			}
		});
	});
	socket.on('quit', function(data) {
		console.log('socket quit');
		roomCollection.update({rid: data.rid}, {$pull: {members: {id: data.id}}}, function(err, result) {
			if (err) {
				console.log('quiterror:' + err);
			} else {
				console.log('member deleted');
				io.in(process.env.CURRENT_ROOM).emit('quit', data.id);
				socket.leave(process.env.CURRENT_ROOM);
			}	
		});
	});
	socket.on('out', function(data) {
		console.log('socket out');
		io.in(process.env.CURRENT_ROOM).emit('out', data.id);
		socket.leave(process.env.CURRENT_ROOM);
	});
	socket.on('explode', function(rid) {
		console.log('socket explode');
		socket.broadcast.to(process.env.CURRENT_ROOM).emit('explode', rid);
	});
});

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = httpServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
